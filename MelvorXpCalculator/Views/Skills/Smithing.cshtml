@model SkillViewModel
@{ ViewData["Title"] = "Smithing"; }

@Html.HiddenFor(m => m.ModifierBonus)
@Html.HiddenFor(m => m.Skill.Xp, new { id = "skillXp" })
<input id="xpDifference" type="hidden" value="0" />

<div class="container">
    <div class="row">
        <img class="skill-icon mr-2" src="@Model.Skill.ImageUrl" />
        <h1>@Model.Skill.Name</h1>
    </div>
    <form asp-action="Smithing">
        <div class="row">
            <div class="col-4">
                <h3>Upgrades</h3>
                <div class="form-group">
                    <label for="SmithingGloves">
                        <img class="skill-icon mr-2" src="~/Images/Smithing_Gloves.svg" />
                        Smithing Gloves
                    </label>
                    <input type="checkbox" id="SmithingGloves" value="50" onchange="UpdateGlobalModifier(this)">
                    <br />
                    <span>+50% Smithing XP when worn, until depleted.</span>
                </div>
            </div>
            <div class="col-4">
                <h3>Level</h3>
                <label>Level</label>
                @Html.HiddenFor(i => i.ModifierBonus)
                @Html.HiddenFor(i => i.Skill.Name)
                @Html.HiddenFor(i => i.Skill.ImageUrl)
                <input id="level" asp-for="Skill.Level" type="number" class="form-control" onchange="updateXp(this)" />
                <label>Xp</label>
                <input id="xp" asp-for="Skill.Xp" type="number" class="form-control" min="0" onchange="updateLevel(this)" />
            </div>
            <div class="col-4">
                <h3>Target</h3>
                <label>Level</label>
                <input id="targetLevel" asp-for="Skill.TargetLevel" type="number" class="form-control" onchange="calculateXp(this)" />
                <label>Xp</label>
                <input id="targetXp" asp-for="Skill.TargetXp" type="number" class="form-control" min="0" onchange="calculateDifference(this)" />
                <button type="submit" class="btn btn-primary float-right mt-2">Update</button>
            </div>
        </div>
    </form>
    <p id="modifierDisplay">@Model.ModifierBonus% Skill XP Modifier</p>
    <div id="smithing-nav" class="panel-tabs">
        <ul>
            <li id="smithing-bars" class="active" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Steel_Bar.svg" class="panel-tabs-image" />
                Bars
            </li>
            <li id="smithing-bronze" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Bronze/Bronze_Helmet.svg" class="panel-tabs-image" />
                Bronze
            </li>
            <li id="smithing-iron" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Iron/Iron_Helmet.svg" class="panel-tabs-image" />
                Iron
            </li>
            <li id="smithing-steel" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Steel/Steel_Helmet.svg" class="panel-tabs-image" />
                Steel
            </li>
            <li id="smithing-mithril" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Mithril/Mithril_Helmet.svg" class="panel-tabs-image" />
                Mithril
            </li>
            <li id="smithing-adamant" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Adamant/Adamant_Helmet.svg" class="panel-tabs-image" />
                Adamant
            </li>
            <li id="smithing-runite" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Rune/Rune_Helmet.svg" class="panel-tabs-image" />
                Rune
            </li>
            <li id="smithing-dragonite" onclick="setActivePanel(this)">
                <img src="~/Images/Items/Smithing/Dragon/Dragon_Helmet.svg" class="panel-tabs-image" />
                Dragon
            </li>
        </ul>
    </div>
    <div id="bars-Panel" class="panel">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Bars")
                {
                <div class="col-4">
                    <div class="item-container">
                        <div class="item-header">
                            <h4>@item.Name</h4>
                            <img src="@item.ImageUrl" class="item-image" />
                        </div>
                        <ul>
                            @{
                                double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                double xpPerAction = item.Xp + bonusXp;
                                var quantity = Math.Ceiling(1852660 / xpPerAction);}
                            <li>Requires:</li>
                            @foreach (var baseItem in item.Requirements)
                            {
                                <li>
                                    <span>@(baseItem.Quantity * quantity)</span>
                                    <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                </li>
                            }
                        </ul>
                        <div class="text-center">
                            <span>Produces:</span> @(item.Quantity * quantity)
                            <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                            @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                            @{
                                var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                            }
                            @switch (time.Days)
                            {
                                case 0:
                                    <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                    break;
                                default:
                                    <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                    break;
                            }
                        </div>
                    </div>
                </div>
                }
            }
        </div>
    </div>
    <div id="bronze-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Bronze")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="iron-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Iron")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="steel-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Steel")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="mithril-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Mithril")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="adamant-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Adamant")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="runite-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Rune")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div id="dragonite-Panel" class="panel" style="display:none;">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                @if (item.SubCategory == "Dragon")
                {
                    <div class="col-4">
                        <div class="item-container">
                            <div class="item-header">
                                <h4>@item.Name</h4>
                                <img src="@item.ImageUrl" class="item-image" />
                            </div>
                            <ul>
                                @{
                                    double bonusXp = (item.Xp * ((double)Model.ModifierBonus / 100));
                                    double xpPerAction = item.Xp + bonusXp;
                                    var quantity = Math.Ceiling(1852660 / xpPerAction);}
                                <li>Requires:</li>
                                @foreach (var baseItem in item.Requirements)
                                {
                                    <li>
                                        <span>@(baseItem.Quantity * quantity)</span>
                                        <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                    </li>
                                }
                            </ul>
                            <div class="text-center">
                                <span>Produces:</span> @(item.Quantity * quantity)
                                <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                                @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                                @{
                                    var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                                }
                                @switch (time.Days)
                                {
                                    case 0:
                                        <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                        break;
                                    default:
                                        <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>
