@model HomeViewModel
@{ ViewData["Title"] = "Smithing"; }


@Html.HiddenFor(m => m.Modifiers.TotalXpModifier)

<div class="container">
    <div class="row">
        <img class="skill-icon mr-2" src="@Model.Skill.ImageUrl" />
        <h1>@Model.Skill.Name</h1>
    </div>
    <div class="row">
        <div class="col-4">
            <h3>Upgrades</h3>
            <div class="form-group">
                <label for="SmithingGloves">
                    <img class="skill-icon mr-2" src="~/Images/Smithing_Gloves.svg" />
                    Smithing Gloves
                </label>
                <input type="checkbox" id="SmithingGloves">
                <br />
                <span>+50% Smithing XP when worn, until depleted.</span>
            </div>
        </div>
        <div class="col-4">
            <h3>Level</h3>
            @Html.LabelFor(m => m.Skill.Level)
            @Html.TextBoxFor(m => m.Skill.Level, new { @class = "form-control", type = "number", onChange = "updateXp(this)" })
            @Html.LabelFor(m => m.Skill.Xp)
            @Html.TextBoxFor(m => m.Skill.Xp, new { @class = "form-control", type = "number", onChange = "updateLevel(this)" })
        </div>
        <div class="col-4">
            <h3>Target</h3>
            <label>Level</label>
            <input type="number" class="form-control" />
            <label>Xp</label>
            <input type="number" class="form-control" />
        </div>
    </div>
    <p id="modifierDisplay">@Model.Modifiers.TotalXpModifier% Skill XP Modifier</p>

    @{ float xpDifference = 550000;}
    <p>xp to earn: @xpDifference</p>
    <div class="panel-tabs">
        <ul>
            <li id="smithing-bars">
                <img src="~/Images/Items/Smithing/Steel_Bar.svg" class="panel-tabs-image" />
                Bars
            </li>
            <li id="smithing-bronze">
                <img src="~/Images/Items/Smithing/Bronze/Bronze_Helmet.svg" class="panel-tabs-image" />
                Bronze
            </li>
            <li id="smithing-iron">
                <img src="~/Images/Items/Smithing/Iron/Iron_Helmet.svg" class="panel-tabs-image" />
                Iron
            </li>
            <li>
                <img src="~/Images/Items/Smithing/Steel/Steel_Helmet.svg" class="panel-tabs-image" />
                Steel
            </li>
            <li>
                <img src="~/Images/Items/Smithing/Mithril/Mithril_Helmet.svg" class="panel-tabs-image" />
                Mithril
            </li>
            <li>
                <img src="~/Images/Items/Smithing/Adamant/Adamant_Helmet.svg" class="panel-tabs-image" />
                Adamant
            </li>
            <li>
                <img src="~/Images/Items/Smithing/Rune/Rune_Helmet.svg" class="panel-tabs-image" />
                Rune
            </li>
            <li>
                <img src="~/Images/Items/Smithing/Dragon/Dragon_Helmet.svg" class="panel-tabs-image" />
                Dragon
            </li>
        </ul>
    </div>
    <div id="BarsPanel" class="panel">
        <div class="row">
            @foreach (var item in Model.Items)
            {
                <div class="col-4">
                    <div class="item-container">
                        <div class="item-header">
                            <h4>@item.Name</h4>
                            <img src="@item.ImageUrl" class="item-image" />
                        </div>
                        <ul>
                            @{
                                double bonusXp = (item.Xp * ((double)Model.Modifiers.TotalXpModifier / 100));
                                double xpPerAction = item.Xp + bonusXp;
                                var quantity = Math.Ceiling(xpDifference / xpPerAction);}
                            <li>Requires:</li>
                            @foreach (var baseItem in item.Requirements)
                            {
                                <li>
                                    <span>@(baseItem.Quantity * quantity)</span>
                                    <img src="@baseItem.ImageUrl" alt="@baseItem.Name" class="item-baseitem-image" />
                                </li>
                            }
                        </ul>
                        <div class="text-center">
                            <span>Produces:</span> @(item.Quantity * quantity)
                            <img src="@item.ImageUrl" alt="@item.Name" class="item-baseitem-image" />
                            @(Math.Ceiling(quantity * xpPerAction)) <img src="/Images/xp.svg" alt="Xp Symbol" class="item-baseitem-image" />
                            @{
                                var time = new TimeSpan(MelvorXpCalculator.Utilities.GetActionTime.PerAction("Smithing").Ticks * (long)quantity);
                            }
                            @switch (time.Days)
                            {
                                case 0:
                                    <p>Time: @time.ToString("hh'h 'mm'm 'ss")s </p>
                                    break;
                                default:
                                    <p>Time: @time.ToString("d'd 'h'h 'mm'm 'ss")s </p>
                                    break;
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
